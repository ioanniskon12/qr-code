// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String?
  plan      Plan     @default(FREE)
  stripeId  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  events    Event[]
  photos    Photo[]
  subscriptions Subscription[]
}

model Event {
  id          String    @id @default(cuid())
  userId      String
  title       String
  description String?
  date        DateTime
  expiresAt   DateTime?
  maxUploads  Int       @default(100)
  isPasswordProtected Boolean @default(false)
  password    String?
  allowGuestUploads Boolean @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  qrCodes     QRCode[]
  photos      Photo[]
}

model QRCode {
  id          String    @id @default(cuid())
  eventId     String
  code        String    @unique
  isProtected Boolean   @default(false)
  password    String?
  expiresAt   DateTime?
  viewCount   Int       @default(0)
  createdAt   DateTime  @default(now())
  
  event       Event     @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

model Photo {
  id          String    @id @default(cuid())
  eventId     String
  uploaderId  String?
  url         String
  thumbnailUrl String?
  title       String?
  tags        String[]
  aiTags      String[]
  analyzed    Boolean   @default(false)
  createdAt   DateTime  @default(now())
  
  event       Event     @relation(fields: [eventId], references: [id], onDelete: Cascade)
  uploader    User?     @relation(fields: [uploaderId], references: [id])
  detectedFaces DetectedFace[]
}

model DetectedFace {
  id          String    @id @default(cuid())
  photoId     String
  personId    String?
  personName  String?
  descriptor  Float[]
  boundingBox Json
  age         Float?
  gender      String?
  expressions Json?
  createdAt   DateTime  @default(now())
  
  photo       Photo     @relation(fields: [photoId], references: [id], onDelete: Cascade)
}

model Subscription {
  id                   String   @id @default(cuid())
  userId               String
  stripeSubscriptionId String   @unique
  stripeCustomerId     String
  plan                 Plan
  status               String
  startDate            DateTime
  endDate              DateTime?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Plan {
  FREE
  SINGLE
  MULTI
}